import csv

TOPOSORT_OUTPUT_FIELDS = ["student", "TA", "language", "bucket", "index", "variation", "result", "errorType", "errorValue"]
ALL_BUCKETS = ["allprop", "notp-1-2", "notp-1-2-3", "notp-1-2-3-4", "notp-1-2-3-5", "notp-1-2-4", "notp-1-2-4-5", "notp-1-2-5", "notp-1-3-4-5", "notp-1-3-5", "notp-1-4-5", "notp-1-5", "notp-2-3", "notp-2-3-4", "notp-2-3-4-5", "notp-2-3-5", "notp-2-4-5", "notp-2-5", "notp-3-4-5", "notp-3-5", "notp-4"] # generated by my code
TRUE_BUCKETS = set(["allprop"])
BUCKET_SIZE = 15

TESTSOURCE_PREFIX = "Elijah"

def make_test_name(bucket, index):
    return f"{TESTSOURCE_PREFIX}: {bucket}_{index}"

def make_aggregate_name():
    return f"{TESTSOURCE_PREFIX}: ALL {TESTSOURCE_PREFIX.upper()}"

def make_output_fields():
    return ["student", make_aggregate_name(), *(make_test_name(bucket, index) for bucket in ALL_BUCKETS for index in range(BUCKET_SIZE))]

def is_correct(bucket, result):
    # is_correct tells us if the is_valid gave the right answer
    # considers exceptions to always be incorrect
    return ((bucket in TRUE_BUCKETS and result == "TRUE") or 
            (bucket not in TRUE_BUCKETS and result == "FALSE"))

def read_toposort_files_to_csv(filenames):
    student_results = {} # maps student ID to dictionary of results

    # step one: compute individual test results
    for filename in filenames:
        # results are aggregated, even across files
        with open(filename) as csv_file:
            reader = csv.DictReader(csv_file, fieldnames=TOPOSORT_OUTPUT_FIELDS)
            for line in reader:
                test_name = make_test_name(line["bucket"], line["index"])
                current_result = is_correct(line["bucket"], line["result"])
                student = student_results.setdefault(line["student"], {})
                # if a student fails one variation, they have failed the bucket
                student[test_name] = current_result and student.get(test_name, True)

    for student_name, student_dict in student_results.items():
        # step two: aggregate results
        student_dict[make_aggregate_name()] = all(student_dict.values())
        # step three: convert True/False to TRUE/FALSE :'(
        for test_bucket, value in student_dict.items():
            student_dict[test_bucket] = "TRUE" if value else "FALSE"
        # step four: include student name
        student_dict["student"] = student_name

    # step five: write to CSV
    with open("output.csv", 'w', newline='') as output_file:
        fieldnames = make_output_fields()
        writer = csv.DictWriter(output_file, fieldnames=fieldnames)
        writer.writeheader()
        for student_dict in student_results.values():
            writer.writerow(student_dict)


if __name__ == '__main__':
    filenames = ("toposortacle_testResults_2018.csv", "toposortacle_testResults_2019.csv")
    read_toposort_files_to_csv(filenames)
